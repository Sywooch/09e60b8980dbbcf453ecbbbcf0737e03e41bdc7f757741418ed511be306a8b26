<?php

namespace app\controllers;

use app\models\UploadForm;
use function foo\func;
use yii;
use yii\data\Pagination;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\helpers\BaseStringHelper;
use yii\helpers\Url;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\web\Response;
use yii\web\UploadedFile;

class UploadController extends Controller {

  public $layout = false;
  private $images = [];
  private $data = [];
  private $images_dir;
  private $json;
  private $limit = 12;

  public function init() {
    $dom = \ROUTING::getCity();
    // Set image directory Yii::getAlias('@webroot') .
    $this->images_dir =  'uploads/images/' . $dom['short_name'];
//    var_dump($this->images_dir);
//    die;
    if (!is_dir($this->images_dir)) {
      mkdir($this->images_dir, 0755);
    }
    parent::init(); // TODO: Change the autogenerated stub
  }

  public function behaviors() {
    return [
        'access' => [
            'class' => AccessControl::className(),
            'rules' => [
                [
                    'allow' => true,
                    'roles' => ['@'],
                ],
            ],
        ],
        'verbs' => [
            'class' => VerbFilter::className(),
            'actions' => [
                'delete' => ['POST', 'GET'],
            ],
        ],
    ];
  }

  /**
   * @inheritdoc
   */
  public function actions() {
    return [
        'error' => [
            'class' => 'yii\web\ErrorAction',
        ],
        'captcha' => [
            'class' => 'yii\captcha\CaptchaAction',
            'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
        ],
    ];
  }

  /**
   * Displays homepage.
   *
   * @return string
   */
  public function actionIndex() {
    if (!is_null(Yii::$app->request->get('filter_name'))) {
      $filter_name = rtrim(str_replace(array('../', '..\\', '..', '*'), '', Yii::$app->request->get('filter_name')), '/');
    } else {
      $filter_name = null;
    }

    // Make sure we have the correct directory
    if (Yii::$app->request->get('directory', false)) {
      $directory = rtrim($this->images_dir . str_replace(array('../', '..\\', '..'), '', urldecode(Yii::$app->request->get('directory'))), '/');
    } else {
      $directory = $this->images_dir;
    }

    if (!is_null(Yii::$app->request->get('page')) && Yii::$app->request->get('page') > 0) {
      $page = Yii::$app->request->get('page');
    } else {
      $page = 1;
    }

    // Get directories
    $directories = glob($directory . '/' . $filter_name . '*', GLOB_ONLYDIR);
    if (!$directories) {
      $directories = array();
    }

    // Get files
    $files = glob($directory . '/' . $filter_name . '*.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF}', GLOB_BRACE);

    if (!$files) {
      $files = array();
    }

    // Merge directories and files
    $images = array_merge($directories, $files);

    // Get total number of files and directories
    $image_total = count($images);

    // Split the array based on current page number and max number of items per page of 10
    $images = array_splice($images, ($page - 1) * $this->limit, $this->limit);
    foreach ($images as $image) {
      $name = str_split(basename($image), 14);
      if (is_dir($image)) {
        $image_url = [];
        if (!is_null(Yii::$app->request->get('target'))) {
          $image_url['target'] = Yii::$app->request->get('target');
        }
        if (!is_null(Yii::$app->request->get('thumb'))) {
          $image_url['thumb'] = Yii::$app->request->get('thumb');
        }
        $image_url['directory'] = urlencode(BaseStringHelper::byteSubstr($image, BaseStringHelper::byteLength($this->images_dir)));

        $this->images[] = [
            'thumb' => '',
            'name' => implode(' ', $name),
            'type' => 'directory',
            'path' => $this->images_dir . BaseStringHelper::byteSubstr($image, BaseStringHelper::byteLength($this->images_dir)),
            'href' => Url::toRoute(ArrayHelper::merge(['filemanager/index'], $image_url))
        ];
      } elseif (is_file($image)) {
        $this->images[] = array(
            'thumb' => \Yii::$app->imageresize->getUrl($image, 100, 100, 'outbound', 0, Yii::getAlias('@webroot/uploads/cache/' . $image)),
            'name' => implode(' ', $name),
            'type' => 'image',
            'path' => $this->images_dir . BaseStringHelper::byteSubstr($image, BaseStringHelper::byteLength($this->images_dir)),
            'href' => $this->images_dir . BaseStringHelper::byteSubstr($image, BaseStringHelper::byteLength($this->images_dir))
        );
      }
    }
    $this->data['images'] = $this->images;
    #Build urls
    $this->data['directory'] = urlencode(Yii::$app->request->get('directory', ''));
    $this->data['filter_name'] = Yii::$app->request->get('filter_name', '');
    $this->data['target'] = Yii::$app->request->get('target', '');
    $this->data['thumb'] = Yii::$app->request->get('thumb', '');
    # Parent url
    $url = [];
    if (Yii::$app->request->get('directory', false)) {
      $pos = strrpos(urldecode(Yii::$app->request->get('directory')), '/');
      if ($pos) {
        $url['directory'] = urlencode(substr(urldecode(Yii::$app->request->get('directory')), 0, $pos));
      }
    }
    if (Yii::$app->request->get('target', false)) {
      $url['target'] = Yii::$app->request->get('target');
    }
    if (Yii::$app->request->get('thumb', false)) {
      $url['thumb'] = Yii::$app->request->get('thumb');
    }
    $this->data['parent'] = Url::toRoute(ArrayHelper::merge(['filemanager/index'], $url));
    // Refresh
    $url['directory'] = urldecode(Yii::$app->request->get('directory'));
    $this->data['refresh'] = Url::toRoute(ArrayHelper::merge(['filemanager/index'], $url));
    //Pagination
    $pagination = new Pagination(['totalCount' => $image_total]);
    $pagination->setPageSize($this->limit);
    $this->data['pagination'] = $pagination;

    return $this->render('index', $this->data);
  }

  public function actionUpload() {
    // Make sure we have the correct directory
    if (Yii::$app->request->get('directory', false))
      $directory = rtrim($this->images_dir . str_replace(array('../', '..\\', '..'), '', urldecode(Yii::$app->request->get('directory'))), '/');
    else
      $directory = $this->images_dir;
    // Check its a directory
    if (!is_dir($directory)) {
      $this->json['error'] = 'Ошибка директории';
    }
    // Upload file
    if (!$this->json) {
      $model = new UploadForm();
      if (Yii::$app->request->isPost) {
        $model->imageFile = UploadedFile::getInstanceByName('file');
        if ($model->upload($directory . DIRECTORY_SEPARATOR))
          $this->json['success'] = 'Успех: Ваш файл был загружен!';
        else
          $this->json['error'] = join(',', $model->getFirstErrors());
      }
    }
    Yii::$app->response->format = Response::FORMAT_JSON;
    return $this->json;
  }

  public function actionFolder() {
    $this->json = array();
    // Make sure we have the correct directory
    if (Yii::$app->request->get('directory', false)) {
      $directory = rtrim($this->images_dir . str_replace(array('../', '..\\', '..'), '', urldecode(Yii::$app->request->get('directory'))), '/');
    } else {
      $directory = $this->images_dir;
    }
    // Check its a directory
    if (!is_dir($directory)) {
      $this->json['error'] = 'Ошибка директории';
    }
    if (!$this->json) {
      // Sanitize the folder name
      $folder = str_replace(array('../', '..\\', '..'), '', basename(html_entity_decode(Yii::$app->request->post('folder'), ENT_QUOTES, 'UTF-8')));
      // Validate the filename length
      if ((strlen($folder) < 3) || (strlen($folder) > 128)) {
        $this->json['error'] = 'Предупреждение: Имя папки должно быть от 3 до 255 символов!';
      }
      // Check if directory already exists or not
      if (is_dir($directory . '/' . $folder)) {
        $this->json['error'] = 'Внимание: Файл или каталог с таким именем уже существует, имя папки должно быть английскими буквами или цифрами!';
      }
    }

    if (!$this->json) {
      mkdir($directory . '/' . $folder, 0777);
      chmod($directory . '/' . $folder, 0777);
      $this->json['success'] = 'Успех: Каталог, создан!';
    }
    Yii::$app->response->format = Response::FORMAT_JSON;
    return $this->json;
  }

  public function actionDelete() {
    if (Yii::$app->request->post('path')) {
      $paths = Yii::$app->request->post('path');
    } else {
      $paths = array();
    }

    // Loop through each path to run validations
    foreach ($paths as $path) {
      $path = rtrim($this->images_dir . str_replace(array('../', '..\\', '..'), '', $path), '/');

      // Check path exsists
      if ($path == $this->images_dir . 'images') {
        $this->json['error'] = $this->language->get('error_delete');

        break;
      }
    }

    if (!$this->json) {
      // Loop through each path
      foreach ($paths as $path) {
        $path = rtrim($this->images_dir . str_replace(array('../', '..\\', '..'), '', $path), '/');

        // If path is just a file delete it
        if (is_file($path)) {
          unlink($path);

          // If path is a directory beging deleting each file and sub folder
        } elseif (is_dir($path)) {
          $files = array();

          // Make path into an array
          $path = array($path . '*');

          // While the path array is still populated keep looping through
          while (count($path) != 0) {
            $next = array_shift($path);

            foreach (glob($next) as $file) {
              // If directory add to path array
              if (is_dir($file)) {
                $path[] = $file . '/*';
              }

              // Add the file to the files to be deleted array
              $files[] = $file;
            }
          }

          // Reverse sort the file array
          rsort($files);

          foreach ($files as $file) {
            // If file just delete
            if (is_file($file)) {
              unlink($file);

              // If directory use the remove directory function
            } elseif (is_dir($file)) {
              rmdir($file);
            }
          }
        }
      }
      $this->json['success'] = 'Папка и все файлы в ней успешно удалены!';
    }
    Yii::$app->response->format = Response::FORMAT_JSON;
    return $this->json;
  }

}
